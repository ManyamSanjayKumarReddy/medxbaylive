import React, { useEffect } from 'react';
import './mapcontainer.css';
import { IoSearch } from "react-icons/io5";
import { RiArrowDownSLine } from "react-icons/ri";

const MapContainer = ({ expanded, searchInput, onExpandToggle, onSearchInputChange, onSearchButtonClick, onResetClick }) => {

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (expanded && !event.target.closest('.map-container-edit')) {
                onExpandToggle();
            }
        };

        document.addEventListener('click', handleClickOutside);
        return () => {
            document.removeEventListener('click', handleClickOutside);
        };
    }, [expanded, onExpandToggle]);

    const handleContainerClick = (event) => {
        event.stopPropagation();
    };

    return (
        <div className='map-container-edit' onClick={handleContainerClick}>
            <div className={` ${expanded ? 'mapExpanded-mapHead' : 'mapHead'}`}>
                <div className={`mapContainer ${expanded ? 'expanded' : ''}`}>
                    <div className={` map-sort-by ${expanded ? '' : 'mapExpanded-sort-by'}`}>
                        <div className="map-form-group">
                            <label htmlFor="sort">Sort By</label>
                            <select id="sort">
                                <option value="relevance" className='custom-option'>Relevance</option>
                                <option value="distance" className='custom-option'>Distance</option>
                                <option value="rating" className='custom-option'>Rating</option>
                            </select>
                            <RiArrowDownSLine className="map-arrow-icon-filter" />
                        </div>
                    </div>
                    <iframe
                        className="mapFrame"
                        src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3151.835434509349!2d144.9631579153587!3d-37.81627974201782!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x6ad642af0f11fd81%3A0xf5772d5fd411f07b!2sFederation%20Square!5e0!3m2!1sen!2sau!4v1619929516970"
                        allowFullScreen=""
                        loading="lazy"
                        title="Google Maps"
                    ></iframe>
                    {expanded ? (
                        <div className="searchInputContainer">
                            <input
                                type="text"
                                className="searchInput"
                                placeholder="Enter search term"
                                value={searchInput}
                                onChange={onSearchInputChange}
                            />
                            <button className="searchButton" onClick={onSearchButtonClick}>
                                <IoSearch />
                            </button>
                        </div>
                    ) : (
                        <div className="searchButtonContainer">
                            <button className="searchButton" onClick={onExpandToggle}>
                                Search on Map <IoSearch />
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default MapContainer;










import React, { useEffect, useState } from 'react';
import './mapcontainer.css';
import { IoSearch } from "react-icons/io5";
import { RiArrowDownSLine } from "react-icons/ri";

const MapContainer = ({ uniqueLocations }) => {
    const [mapLoaded, setMapLoaded] = useState(false);
    const apiKey = "AIzaSyApr-nSbv28HGFJxddFfjhtNM-xtF2YfMA"; // Replace with your actual API key

    useEffect(() => {
        if (!mapLoaded) {
            loadGoogleMapsScript(apiKey)
                .then(() => {
                    setMapLoaded(true);
                })
                .catch((error) => {
                    console.error('Error loading Google Maps script:', error);
                });
        }
    }, [mapLoaded, apiKey]);

    useEffect(() => {
        if (mapLoaded && window.google && uniqueLocations) {
            initMap();
        }
    }, [mapLoaded, uniqueLocations]);

    const initMap = () => {
        const map = new window.google.maps.Map(document.getElementById('map'), {
            zoom: 10,
            center: { lat: 20.5937, lng: 78.9629 } // Center map on India
        });

        const bounds = new window.google.maps.LatLngBounds();

        uniqueLocations.forEach(location => {
            const position = { lat: location.lat, lng: location.lng };

            const marker = new window.google.maps.Marker({
                position: position,
                map: map,
                title: 'Free Time Slot Location'
            });

            const infoWindow = new window.google.maps.InfoWindow({
                content: `Lat: ${location.lat}, Lng: ${location.lng}`
            });

            marker.addListener('click', () => {
                infoWindow.open(map, marker);
            });

            bounds.extend(position);
        });

        map.fitBounds(bounds);

        const maxZoomLevel = 10;
        map.addListener('bounds_changed', () => {
            if (map.getZoom() > maxZoomLevel) {
                map.setZoom(maxZoomLevel);
            }
        });
    };

    const loadGoogleMapsScript = (apiKey) => {
        return new Promise((resolve, reject) => {
            if (window.google && window.google.maps) {
                resolve(window.google.maps);
                return;
            }

            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}`;
            script.async = true;
            script.onload = () => resolve(window.google.maps);
            script.onerror = (error) => reject(error);

            document.head.appendChild(script);
        });
    };

    return (
    <div className='map-container-edit' >
            <div className={` ${"expanded" ? 'mapExpanded-mapHead' : 'mapHead'}`}>
                <div className={`mapContainer ${"expanded" ? 'expanded' : ''}`}>
                    <div className={` map-sort-by ${"expanded" ? '' : 'mapExpanded-sort-by'}`}>
                        <div className="map-form-group">
                            <label htmlFor="sort">Sort By</label>
                            <select id="sort">
                                <option value="relevance" className='custom-option'>Relevance</option>
                                <option value="distance" className='custom-option'>Distance</option>
                                <option value="rating" className='custom-option'>Rating</option>
                            </select>
                            <RiArrowDownSLine className="map-arrow-icon-filter" />
                        </div>
                    </div>
                    <div id="map" style={{ height: '300px', width: '100%' }}></div>
                    {true ? (
                        <div className="searchInputContainer">
                            <input
                                type="text"
                                className="searchInput"
                                placeholder="Enter search term"
                                value={"searchInput"}
                                onChange={"onSearchInputChange"}
                            />
                            <button className="searchButton" onClick={"onSearchButtonClick"}>
                                <IoSearch />
                            </button>
                        </div>
                    ) : (
                        <div className="searchButtonContainer">
                            <button className="searchButton" onClick={"onExpandToggle"}>
                                Search on Map <IoSearch />
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default MapContainer;











show the default map as using userlocation :
import React, { useEffect, useState } from 'react';
import './mapcontainer.css';
import { IoSearch } from "react-icons/io5";
import { RiArrowDownSLine } from "react-icons/ri";

const MapContainer = ({
    expanded,
    searchInput,
    onExpandToggle,
    onSearchInputChange,
    onSearchButtonClick,
    onResetClick,
    uniqueLocations
}) => {
    const [mapLoaded, setMapLoaded] = useState(false);
    const [locationDenied, setLocationDenied] = useState(false); // Track if location was denied
    const apiKey = 'AIzaSyApr-nSbv28HGFJxddFfjhtNM-xtF2YfMA'; // Ensure this is correctly set

    const loadGoogleMapsScript = () => {
        return new Promise((resolve, reject) => {
            if (document.querySelector(`script[src*="maps.googleapis.com"]`)) {
                resolve(window.google.maps);
                return;
            }

            if (window.google && window.google.maps) {
                resolve(window.google.maps);
                return;
            }

            window.initMap = () => {
                if (window.google && window.google.maps) {
                    resolve(window.google.maps);
                } else {
                    reject(new Error('Google Maps API not loaded'));
                }
            };

            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap&v=weekly&libraries=geometry`;
            script.async = true;
            script.defer = true;
            script.onerror = (error) => {
                reject(error);
            };
            document.head.appendChild(script);
        });
    };

    useEffect(() => {
        loadGoogleMapsScript()
            .then((googleMaps) => {
                setMapLoaded(true);
                if (uniqueLocations) {
                    initMap(googleMaps);
                } else {
                    console.warn('uniqueLocations is not available');
                }
            })
            .catch((error) => {
                console.error('Error loading Google Maps:', error);
            });
    }, [uniqueLocations]);

    const getUserLocation = () => {
        return new Promise((resolve, reject) => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    position => {
                        resolve({
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        });
                    },
                    error => {
                        reject(error);
                    }
                );
            } else {
                reject(new Error('Geolocation is not supported by this browser.'));
            }
        });
    };

    const handleLocationRequest = async () => {
        try {
            const userLocation = await getUserLocation();
            setLocationDenied(false); // Reset location denied state if access is granted
            return userLocation;
        } catch (error) {
            if (error.code === 1) { // User denied geolocation
                setLocationDenied(true); // Show prompt to enable location
            }
            return null; // Return null if location access is denied or fails
        }
    };

    const calculateDistance = (googleMaps, userLocation, targetLocation) => {
        const userLatLng = new googleMaps.LatLng(userLocation.lat, userLocation.lng);
        const targetLatLng = new googleMaps.LatLng(targetLocation.lat, targetLocation.lng);
        return googleMaps.geometry.spherical.computeDistanceBetween(userLatLng, targetLatLng);
    };

    const initMap = async (googleMaps) => {
        if (!googleMaps) {
            console.error('Google Maps API not loaded');
            return;
        }

        let userLocation = await handleLocationRequest();
        const defaultCenter = { lat: 20.5937, lng: 78.9629 }; // Center map on India initially
        const map = new googleMaps.Map(document.getElementById('map'), {
            zoom: 10,
            center: userLocation || defaultCenter // Set the default center if user location is not available
        });

        const bounds = new googleMaps.LatLngBounds();

        if (userLocation) {
            const userMarker = new googleMaps.Marker({
                position: userLocation,
                map: map,
                title: 'Your Location',
                icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
            });

            bounds.extend(userLocation);

            const userInfoWindow = new googleMaps.InfoWindow({
                content: 'You are here'
            });

            userMarker.addListener('click', () => {
                userInfoWindow.open(map, userMarker);
            });

            map.setCenter(userLocation);
            map.setZoom(12);
        }

        if (uniqueLocations && Array.isArray(uniqueLocations)) {
            uniqueLocations.forEach(location => {
                if (!location.lat || !location.lng) {
                    console.error('Location data is incomplete:', location);
                    return;
                }

                const position = { lat: location.lat, lng: location.lng };
                let distanceInKm = 'N/A'; 

                if (userLocation) {
                    const distanceInMeters = calculateDistance(googleMaps, userLocation, position);
                    distanceInKm = (distanceInMeters / 1000).toFixed(2);
                }

                const marker = new googleMaps.Marker({
                    position: position,
                    map: map,
                    title: 'Free Time Slot Location'
                });

                const infoWindow = new googleMaps.InfoWindow({
                    content: `Hospital: ${location.name}, City: ${location.city}, Distance: ${distanceInKm} km`
                });

                marker.addListener('click', () => {
                    infoWindow.open(map, marker);
                });

                bounds.extend(position);
            });
        } else {
            console.error('uniqueLocations is not properly defined:', uniqueLocations);
        }

        map.fitBounds(bounds);

        const maxZoomLevel = 10;
        map.addListener('bounds_changed', () => {
            if (map.getZoom() > maxZoomLevel) {
                map.setZoom(maxZoomLevel);
            }
        });
    };

    const handleContainerClick = (event) => {
        event.stopPropagation(); // Prevent click events from propagating outside the map container
    };

    return (
        <div className='map-container-edit' onClick={handleContainerClick}>
            <div className={` ${expanded ? 'mapExpanded-mapHead' : 'mapHead'}`}>
                <div className={`mapContainer ${expanded ? 'expanded' : ''}`}>
                    <div className={` map-sort-by ${expanded ? '' : 'mapExpanded-sort-by'}`}>
                        <div className="map-form-group">
                            <label htmlFor="sort">Sort By</label>
                            <select id="sort">
                                <option value="relevance" className='custom-option'>Relevance</option>
                                <option value="distance" className='custom-option'>Distance</option>
                                <option value="rating" className='custom-option'>Rating</option>
                            </select>
                            <RiArrowDownSLine className="map-arrow-icon-filter" />
                        </div>
                    </div>
                    {mapLoaded ? (
                        <div id="map" style={{ height: '100vh', width: '100%' }}></div>
                    ) : (
                        <div>Loading map...</div>
                    )}
                    {expanded ? (
                        <div className="searchInputContainer">
                            <input
                                type="text"
                                className="searchInput"
                                placeholder="Enter search term"
                                value={searchInput}
                                onChange={onSearchInputChange}
                            />
                            <button className="searchButton" onClick={onSearchButtonClick}>
                                <IoSearch />
                            </button>
                        </div>
                    ) : (
                        <div className="searchButtonContainer">
                            <button className="searchButton" onClick={onExpandToggle}>
                                Search on Map <IoSearch />
                            </button>
                        </div>
                    )}
                </div>
            </div>
            {locationDenied && (
                <div className="location-denied-prompt">
                    <p>Location access is required to show your position on the map. Please enable location services in your browser settings.</p>
                    <button onClick={handleLocationRequest}>Try Again</button>
                </div>
            )}
        </div>
    );
};

export default MapContainer;
